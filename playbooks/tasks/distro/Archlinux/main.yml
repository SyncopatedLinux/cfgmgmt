---

- name: include distribution package vars
  include_vars:
    dir: "vars/distro/"
    file: "{{ ansible_distribution }}.yml"

- name: create user to build packages
  user:
    name: aur_builder
    create_home: yes
    shell: /usr/bin/zsh

- block:
    - name: check -march support
      shell: /lib/ld-linux-x86-64.so.2 --help | grep supported|xargs|awk '{print $1}'
      register: supported_march

    - name: check output from grep command
      debug:
        msg: "{{ supported_march }}"

    - name: set architecture
      set_fact:
        architecture: "x86-64-v3"
      when: supported_march.stdout_lines[0] == 'x86-64-v3'

    - name: set architecture
      set_fact:
        architecture: "x86-64"
      when: supported_march.stdout_lines[0] == 'x86-64-v2'

  ignore_errors: "{{ ansible_check_mode }}"
  tags: ['flags', 'repo', 'packages']

- name: adjust pacman, paru and makepkg configs
  template:
    src: "etc/{{ item }}.j2"
    dest: "/etc/{{ item }}"
    owner: root
    group: root
    mode: '0644'
    backup: yes
  with_items:
    - pacman.conf
    - paru.conf
    - makepkg.conf
  tags: ['makepkg', 'pacman', 'paru', 'packages', 'repo']
  ignore_errors: "{{ ansible_check_mode }}"

- name: add syncopated repo key
  shell: |
    if [[ -z "$(pacman-key --list-keys | grep syncopated 2>/dev/null)" ]];
    then
      echo "key already installed"
    else
      curl http://soundbot.hopto.org/syncopated/syncopated.gpg | pacman-key --add -
      pacman-key --lsign-key 36A6ECD355DB42B296C0CEE2157CA2FC56ECC96A
    fi
  register: syncopated_keys
  until: "syncopated_keys is not failed"
  retries: 10
  delay: 10
  check_mode: False
  tags: ['repo']

- name: add archaudio repo key
  shell: |
    if [[ -z "$(pacman-key --list-keys | grep OSAMC 2>/dev/null)" ]];
    then
      echo "key already installed"
    else
      curl https://arch.osamc.de/proaudio/osamc.gpg | pacman-key --add -
      pacman-key --lsign-key 762AE5DB2B38786364BD81C4B9141BCC62D38EE5
    fi
  register: archaudio_keys
  until: "archaudio_keys is not failed"
  retries: 10
  delay: 10
  check_mode: False
  tags: ['repo']

- name: update cache
  pacman:
    update_cache: True
    upgrade: False
  tags: ['packages']

- name: ensure user permissions for /var/tmp/makepkg
  file:
    path: "{{ item }}"
    state: directory
    mode: '0775'
    owner: aur_builder
    group: wheel
    recurse: True
  with_items:
    - /tmp/makepkg
    - /var/tmp/makepkg
  tags: ['packages']

- name: check if paru installed
  stat: path="/usr/bin/paru"
  register: paru
  tags: ['paru', 'packages']

- name: install paru
  block:
    - name: install paru
      pacman:
        name: paru-bin
        state: present
        force: yes
        extra_args: --noconfirm
      register: paru_package
      until: "paru_package is not failed"
      retries: 2
      delay: 10

  rescue:
    - name: clone paru
      git:
        repo: "https://aur.archlinux.org/paru.git"
        dest: "/tmp/paru"
        accept_hostkey: yes
        update: yes
        force: no
      become_user: aur_builder

    - name: make and install paru
      shell: "makepkg -si --noconfirm --needed"
      args:
        chdir: "/tmp/paru"
      become_user: aur_builder

    - name: clean and update package cache
      shell: |
        paru -Sc --noconfirm && paru -Syy
      become_user: aur_builder

  when: not paru.stat.exists
  tags: ['paru', 'packages']

- name: check if mirrors have been updated within the past 24h
  shell: "fd --changed-within 24hours --search-path=/etc/pacman.d"
  register: mirror_status
  tags: ['mirrors', 'packages']

- name: print output
  debug:
    msg: "{{ mirror_status }}"
  when:
    - ( mirror_status.stdout_lines | length < 0 or update_mirrors is defined )
    - debugging is defined
  tags: ['mirrors', 'packages']

- name: update mirrors
  shell: |
    reflector --download-timeout 3 --protocol https \
    --latest 20 --sort rate --score 10 --fastest 8 \
    --save /etc/pacman.d/mirrorlist
  when: ( mirror_status.stdout_lines | length < 0 or update_mirrors is defined )
  register: mirror_update
  tags: ['mirrors', 'packages']

- name: update and upgrade
  pacman:
    update_cache: True
    upgrade: False
  when: mirror_update.changed
  tags: ['packages']

- name: remove pipewire
  pacman:
    name: "{{ item }}"
    state: absent
    force: yes
    extra_args: --noconfirm
  with_items:
    - pipewire-alsa
    - pipewire-audio
    - pipewire-jack
    - pipewire-pulse
    - wireplumber
  when: use_jack|default(true)|bool == true
  ignore_errors: True
  tags: ['packages']

# - name: get list of currently installed packages
#   shell: "pacman -Q | awk '{print $1}'"
#   register: installed_packages
#   tags: ['packages']

# - name: print installed_packages
#   debug:
#     msg: "{{ installed_packages }}"
#   when: debugging is defined
#   tags: ['packages']
#
# - name: print package list
#   debug:
#     msg: "{{ item.value  }}"
#   loop: "{{ packages | dict2items }}"
#   when: debugging is defined
#   tags: ['testing']
#
# - name: set packages to install
#   set_fact:
#     _packages: "{{ item.value | difference(installed_packages.stdout) }}"
#   loop: "{{ packages | dict2items }}"
#   tags: ['packages']
#
# - name: print output
#   debug:
#     msg: "{{ _packages }}"
#   when: debugging is defined
#   tags: ['packages']

- block:
    - name: installing
      debug:
        msg: "Installing...."

    # - name: packages
    #   aur:
    #     use: paru
    #     name: "{{ item }}"
    #     state: present
    #     extra_args: "--overwrite '*'"
    #   with_items:
    #     - "{{ _packages }}"
    #     - autofs

    - name: install packages
      script: "{{ ansible_home }}/ans.rb {{ ansible_distribution }}"
      delegate_to: 127.0.0.1
      tags: ['testing']

  rescue:
    - name: packages
      shell: |
        export pkgs=({{ _packages }})
        for p in ${pkgs[@]};do
          yes | paru -S --noconfirm --needed --cleanafter --useask $(echo $p | sed 's/,//') || continue
        done

  become_user: aur_builder
  when: _packages | length > 0
  tags: ['packages']

- name: remove aur_builder
  user:
    name: aur_builder
    state: abent
    remove: True


# - name: Check on an async task
#   async_status:
#     jid: "{{ package_install.ansible_job_id }}"
#   register: job_result
#   until: job_result.finished
#   retries: 100
#   delay: 10
#   become_user: aur_builder
#   tags: ['testing']

# #TODO: add task to watch long running task

#
