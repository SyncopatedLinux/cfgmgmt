---

- hosts: all
  tags: ['base', 'ui', 'shell', 'packages', 'testing']
  become: True
  gather_subset:
    - hardware
    - network
  vars:
    path:
      - "{{ lookup('env','HOME') }}/.local/bin"
      - "{{ lookup('env','HOME') }}/.cargo/bin"

  vars_files:
    - "vars/user.yml"

  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/bin:{{ path|join(':') }}"
    PKG_CONFIG_PATH: "/usr/share/pkgconfig:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig"
    ZSH: "/usr/local/share/oh-my-zsh"
    DISPLAY: ":0"

  pre_tasks:

    - name: set ansible_home
      set_fact:
        ansible_home: "{{ lookup('env','HOME') }}/Workspace/syncopated"

    - block:
        - name: print output
          debug:
            msg: "{{ keyserver }}"

        - name: check if keys are present
          stat:
            path: "{{ user.home }}/.ssh/id_rsa"
          register: keys

        - name: copy keys from remote host
          delegate_to: 127.0.0.1
          run_once: True
          become_user: "{{ user.name }}"
          shell: "scp {{ user.name }}@{{ keyserver }}:~/.ssh/{{ item }} {{ user.home }}/.ssh/{{ item }}"
          args:
            chdir: "{{ user.home }}"
          with_items:
            - id_rsa
            - id_rsa.pub
          when:
            - not keys.stat.exists
            - keyserver is defined
          tags: ['keys']

        - name: enable ssh daemon
          service:
            name: sshd
            enabled: True

      ignore_errors: "{{ ansible_check_mode }}"
      tags: ['ssh']

      - import_tasks: tasks/sudoers.yml
        tags: ['sudoers']

  tasks:
    - name: include vars
      include_vars:
        file: vars/distro/{{ ansible_distribution }}.yml

    - name: include user vars
      include_vars:
        dir: vars
        depth: 1

    - block:
        - name: check -march support
          shell: /lib/ld-linux-x86-64.so.2 --help | grep supported|xargs|awk '{print $1}'
          register: supported_march

        - name: check output from grep command
          debug:
            msg: "{{ supported_march }}"

        - name: set architecture
          set_fact:
            architecture: "x86-64-v3"
          when: supported_march.stdout_lines[0] == 'x86-64-v3'

        - name: set architecture
          set_fact:
            architecture: "x86-64"
          when: supported_march.stdout_lines[0] == 'x86-64-v2'

      ignore_errors: "{{ ansible_check_mode }}"
      tags: ['flags', 'repo', 'packages']


    # - name: get list of currently installed packages
    #   shell: "pacman -Q | awk '{print $1}'"
    #   register: installed_packages
    #   tags: ['testing']
    #
    # - name: print package list
    #   debug:
    #     msg: "{{ packages  | to_yaml }}"
    #   when: debugging is defined
    #   tags: ['testing']

    # - name: install packages
    #   script: "{{ ansible_home }}/ans.rb {{ ansible_distribution }}"
    #   delegate_to: 127.0.0.1
    #   become_user: "{{ user.name }}"
    #   tags: ['testing']

    # - name: install packages
    #   script: "/usr/bin/uxterm -class 'backup' -e /usr/bin/env DISPLAY=:0 {{ ansible_home }}/ans.rb {{ ansible_distribution }}"
    #   delegate_to: 127.0.0.1
    #   become_user: "{{ user.name }}"
    #   tags: ['testing']
    # - name: set packages to install
    #   set_fact:
    #     _packages: "{{ item.value | difference(installed_packages.stdout) }}"
    #   loop: "{{ packages | dict2items }}"
    #   tags: ['testing']

    # - name: print output
    #   debug:
    #     msg: "{{ _packages }}"
    #   when: debugging is defined
    #   tags: ['testing']

    - debug:
        msg: "test"

- name: include archlinux playbook
  import_playbook: Archlinux.yml

- name: include base playbook
  import_playbook: base.yml

- name: include ui playbook
  import_playbook: ui.yml
