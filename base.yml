---

- hosts: all
  become: True
  gather_subset:
    - hardware
    - network
  vars:
    distrib_id: Arch
    path:
      - "{{ lookup('env','HOME') }}/.local/bin"
      - "{{ lookup('env','HOME') }}/.rvm/bin"
      - "{{ lookup('env','HOME') }}/.local/share/gem/ruby/3.0.0/bin"
      - "{{ lookup('env','HOME') }}/.cargo/bin"
  vars_files:
    - main.yml

  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/bin:{{ path|join(':') }}"
    PKG_CONFIG_PATH: "/usr/share/pkgconfig:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig"
    ZSH: "/usr/local/share/oh-my-zsh"
    DISPLAY: ":0"

  pre_tasks:

    - name: Include group variables
      include_vars:
        dir: group_vars
      tags: common

    - name: Include host variables
      include_vars:
        file: host_vars/{{ inventory_hostname }}.yml
      tags: common

    - block:
        - name: Print keyserver hostname
          ansible.builtin.debug:
            msg: "{{ keyserver }}"
          when:
            - debugging is defined
            - keyserver is defined

        - name: Check if keys are present
          ansible.builtin.stat:
            path: "{{ user.home }}/.ssh/id_rsa"
          register: keys

        - name: Copy keys from remote host
          become: False
          delegate_to: 127.0.0.1
          run_once: True
          ansible.builtin.shell: "scp {{ user.name }}@{{ keyserver }}:~/.ssh/{{ item }} {{ user.home }}/.ssh/{{ item }}"
          args:
            chdir: "{{ user.home }}"
          with_items:
            - id_rsa
            - id_rsa.pub
          when:
            - not keys.stat.exists
            - keyserver is defined
          tags: ['keys']

        - name: Enable ssh daemon
          ansible.builtin.service:
            name: sshd
            enabled: True

      ignore_errors: "{{ ansible_check_mode }}"
      tags: ['ssh']

    - name: Symlink /etc/os-release to /etc/system-release
      ansible.builtin.file:
        src: /etc/os-release
        dest: /etc/system-release
        state: link
      tags: ['base']

    - name: Get the distrib_id
      ansible.builtin.shell: |
        cat /etc/lsb-release | grep DISTRIB_ID | awk -F '=' '{print $2}'
      register: distrib_id
      tags: ['facts', 'base', 'system', 'user', 'common']

    - name: Set distrib_id as a fact
      ansible.builtin.set_fact:
        distrib_id: "{{ distrib_id.stdout }}"
      tags: ['facts', 'base', 'system', 'user', 'common']

    - name: Include distro vars
      ansible.builtin.include_vars:
        file: vars/{{ ansible_distribution }}.yml
      tags: ['base', 'common']

    - name: Set ansible_home
      ansible.builtin.set_fact:
        ansible_home: "{{ lookup('env','HOME') }}/Workspace/syncopated/cfgmgmt"
      tags: ['base', 'common']

    - name: Set admin_group variable
      ansible.builtin.set_fact:
        admin_group: "{{ admin_group }}"
      tags: ['base']

  roles:

    - role: user
      tags: ['user']

    - role: base
      tags: ['base']

    - role: network
      tags: ['netork']

    - role: audio
      tags: ['audio']

    - role: system
      tags: ['system']

    - role: applications
      tags: ['applications']

    - role: virt
      tags: ['virt']

  post_tasks:

      - name: Cleanup old backup files
        ansible.builtin.script: /usr/local/bin/cleanup.sh
        when: cleanup is defined
        tags: ['cleanup']

      # Reset is not implemented local connection
      - name: Reboot host
        ansible.builtin.reboot:
        async: 1
        poll: 0
        ignore_errors: True
        when: reboot is defined

      - name: Wait for host to reboot
        ansible.builtin.wait_for_connection:
          connect_timeout: 20
          sleep: 5
          delay: 5
          timeout: 120
        when: reboot is defined
